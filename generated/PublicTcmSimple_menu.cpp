/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

// Generated for Arduino ESP32 by TcMenu 4.4.0 on 2025-01-14T10:07:14.635133400Z.

#include <tcMenu.h>
#include "PublicTcmSimple_menu.h"
#include "../ThemeDarkModeTraditional.h"

// Global variable declarations
const PROGMEM  ConnectorLocalInfo applicationInfo = { "PTcSim 241111 1501", "f1cdf4ed-8d8f-469e-b907-91c3e1536fab" };
TcMenuRemoteServer remoteServer(applicationInfo);

TFT_eSPI gfx;
TfteSpiDrawable gfxDrawable(&gfx, 0);
GraphicsDeviceRenderer renderer(30, applicationInfo.name, &gfxDrawable);
NoInitialisationNeeded serialInitializer;
SerialTagValueTransport serialTransport(&Serial2);
TagValueRemoteServerConnection serialConnection(serialTransport, serialInitializer);

// Global Menu Item declarations
const PROGMEM AnyMenuInfo minfoTcmTargetNum = { "TargetNum", 8, 0xffff, 0, NO_CALLBACK };
TextMenuItem menuTcmTargetNum(&minfoTcmTargetNum, "default", 5, nullptr, INFO_LOCATION_PGM);
const PROGMEM BooleanMenuInfo minfoTcmRestart = { "Restart", 9, 0xffff, 1, onChangeTcmRestart, NAMING_TRUE_FALSE };
BooleanMenuItem menuTcmRestart(&minfoTcmRestart, false, &menuTcmTargetNum, INFO_LOCATION_PGM);
const PROGMEM BooleanMenuInfo minfoTcmRefreshMenu = { "RefreshMenu", 7, 0xffff, 1, onChangeTcmRefreshMenu, NAMING_TRUE_FALSE };
BooleanMenuItem menuTcmRefreshMenu(&minfoTcmRefreshMenu, false, &menuTcmRestart, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoTcmTimeSec = { "TimeSec", 6, 0xffff, 32000, onChangeTcmTimeSec, 0, 1, "" };
AnalogMenuItem menuTcmTimeSec(&minfoTcmTimeSec, 0, &menuTcmRefreshMenu, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoTcmBaseCCW = { "BaseCCW", 4, 0xffff, 255, onChangeTcmBaseCCW, 0, 1, "" };
AnalogMenuItem menuTcmBaseCCW(&minfoTcmBaseCCW, 0, &menuTcmTimeSec, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoTcmBaseTCW = { "BaseTCW", 3, 0xffff, 255, onChangeTcmBaseTCW, 0, 1, "" };
AnalogMenuItem menuTcmBaseTCW(&minfoTcmBaseTCW, 0, &menuTcmBaseCCW, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoTcmCount2 = { "Count2", 2, 0xffff, 255, onChangeTcmCount2, 0, 1, "" };
AnalogMenuItem menuTcmCount2(&minfoTcmCount2, 0, &menuTcmBaseTCW, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoTcmCount1 = { "Count1", 1, 0xffff, 255, onChangeTcmCount1, 0, 1, "" };
AnalogMenuItem menuTcmCount1(&minfoTcmCount1, 0, &menuTcmCount2, INFO_LOCATION_PGM);
const PROGMEM BooleanMenuInfo minfoTcmDebugLED = { "DebugLED", 5, 0xffff, 1, onChangeTcmDebugLED, NAMING_TRUE_FALSE };
BooleanMenuItem menuTcmDebugLED(&minfoTcmDebugLED, false, &menuTcmCount1, INFO_LOCATION_PGM);

void setupMenu() {
    // First we set up eeprom and authentication (if needed).
    setSizeBasedEEPROMStorageEnabled(false);
    // Now add any readonly, non-remote and visible flags.
    menuTcmTargetNum.setReadOnly(true);
    menuTcmTargetNum.setLocalOnly(true);

    // Code generated by plugins and new operators.
    gfx.begin();
    gfx.setRotation(0);
    renderer.setUpdatesPerSecond(10);
    switches.init(internalDigitalIo(), SWITCHES_POLL_EVERYTHING, true);
    menuMgr.initForTwoButton(&renderer, &menuTcmDebugLED, 0, 14);
    remoteServer.addConnection(&serialConnection);
    renderer.setTitleMode(BaseGraphicalRenderer::TITLE_FIRST_ROW);
    renderer.setUseSliderForAnalog(true);
    installDarkModeTraditionalTheme(renderer, MenuFontDef(nullptr, 2), MenuFontDef(nullptr, 2), true);
}

